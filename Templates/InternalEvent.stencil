{% include "FileHeader.stencil" %}
{% macro propertyName name %}{{ name|swiftIdentifier:"pretty"|lowerFirstLetter|escapeReservedKeywords|upperWord:"id" }}{% endmacro %}
{% macro enumName name %}{{ name|swiftIdentifier:"pretty"|escapeReservedKeywords|replace:"`Type`","EventType"|upperWord:"hhtm" }}{% endmacro %}

{% set accessModifier %}{% if options.publicAccess %}public{% else %}internal{% endif %}{% endset %}

import Analytics

/**
 {{ name }}

 - **Описание**: {{ description }}
 - **Категория**: {{ category }}
 {% if event.experiment %}
 - **Эксперимент**: [{{ experiment.description }}]({{ experiment.url }})
{% endif %}
 */
{{ accessModifier }} struct {{ structName }}:
    {{ protocols }} {

    {{ accessModifier }} enum CodingKeys: String, CodingKey {
        {% for parameter in parameters %}
        case {% call propertyName parameter.name %} = "{{ parameter.name }}"
        {% endfor %}
        case hhtmSource
        case hhtmFrom
    }

    {% for parameter in parameters where parameter.oneOf %}
    {{ accessModifier }} enum {% call enumName parameter.name %}: String, Encodable {
        {% for oneOf in parameter.oneOf %}
            {% if oneOf.description %}
        /// {{ oneOf.description }}
            {% endif %}
        case {% call propertyName oneOf.name %} = "{{ oneOf.name }}"
        {% if not forloop.last %}

        {% endif %}
        {% endfor %}
    }

    {% endfor %}

    /// Название события
    {{ accessModifier }} let eventName = "{{ eventName }}"

    /// С какого экрана событие будет отправлено
    {{ accessModifier }} let hhtmSource: HHTMSource?

    /// Предыдущий экран
    {{ accessModifier }} let hhtmFrom: HHTMSource?

    {% for parameter in parameters %}
        {% if parameter.description %}
            {% if parameter.description|isMultiline %}
    /**
    {{ parameter.description|multilineAlignment }}
    */
            {% else %}
    /// {{ parameter.description }}
            {% endif %}
        {% endif %}
        {% if parameter.const %}
    {{ accessModifier }} let {% call propertyName parameter.name %} = "{{ parameter.const }}"
        {% elif parameter.type %}
    {{ accessModifier }} let {% call propertyName parameter.name %}: {{ parameter.type }}
        {% elif parameter.oneOf %}
    {{ accessModifier }} let {% call propertyName parameter.name %}: {% call enumName parameter.name %}
        {% endif %}

    {% endfor %}

    {{ accessModifier }} init(
        hhtmSource: HHTMSource?, 
        hhtmFrom: HHTMSource?{% if hasParametersToInit %},{% endif %}
        {% for parameter in parameters where parameter.type or parameter.oneOf %}
            {% if parameter.type %}
        {% call propertyName parameter.name %}: {{ parameter.type }}{% if not forloop.last %},{% endif %}
            {% elif parameter.oneOf %}
        {% call propertyName parameter.name %}: {% call enumName parameter.name %}{% if not forloop.last %},{% endif %}
            {% endif %}
        {% endfor %}
    ) {
        self.hhtmSource = hhtmSource
        self.hhtmFrom = hhtmFrom
        {% for parameter in parameters where parameter.type or parameter.oneOf %}
        self.{% call propertyName parameter.name %} = {% call propertyName parameter.name %}
        {% endfor %}
    }
}
